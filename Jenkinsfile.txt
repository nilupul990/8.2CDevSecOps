pipeline {
  agent any

  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/nilupul990/8.2CDevSecOps.git'
      }
    }
    stage('Install Dependencies') {
      steps {
        bat 'npm install'
      }
    }
    stage('Run Tests') {
      steps {
        // Allow pipeline to continue even if tests fail:
        bat 'cmd /c "npm test" || exit /b 0'
      }
    }
    stage('Generate Coverage Report') {
      steps {
        bat 'cmd /c "npm run coverage" || exit /b 0'
      }
    }
    stage('NPM Audit (Security Scan)') {
      steps {
        // Show CVEs but don't fail the whole run:
        bat 'cmd /c "npm audit" || exit /b 0'
      }
    }
    stage('SonarCloud Analysis') {
  steps {
    withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]) {
      powershell '''
        $ErrorActionPreference = "Stop"
        $scannerDir = "sonar-scanner"
        if (-not (Test-Path $scannerDir)) {
          # 1) Download the SonarScanner CLI .zip from SonarSource (copy the official URL)
          $SCANNER_URL = "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-7.2.0.5079-windows-x64.zip"
          Invoke-WebRequest -Uri $SCANNER_URL -OutFile "scanner.zip"
          Expand-Archive -Path "scanner.zip" -DestinationPath "."
          # If the extracted folder has a versioned name, rename it for simplicity:
          Get-ChildItem -Directory | Where-Object { $_.Name -like "sonar-scanner-*" } | Select-Object -First 1 | ForEach-Object {
            Rename-Item $_.FullName $scannerDir
          }
        }
        # 2) Run the scanner (uses sonar-project.properties in repo root)
        $env:SONAR_TOKEN = $env:SONAR_TOKEN
        .\\sonar-scanner\\bin\\sonar-scanner.bat
      '''
    }
  }
}

  }
}
